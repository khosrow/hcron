.TH HCRON-EVENT "1" "November 2010" "hcron 0.17" ""
.SH NAME
hcron-event \- Create and edit hcron event definition files
.SH SYNOPSIS
.B hcron-event
.RB [ -c ]
.RB [ -y | -n ]
.I "<path> [...]"

.SH DESCRIPTION
hcron-event allows one to create and edit event definition files. In the
case of a new file, it is populated with an empty template and opened in
an editor. Existing files are simply opened for editing. The editor used
is from the EDITOR environment variable, or vi. Once editing is completed,
the user is asked if a reload should signalled (see hcron-reload). If
multiple events are being edited, only the last one should be followed
by a reload.

.PP
Where:

.TP
.B -c
Create event file only (if it does not already exist) and do not invoke
editor.

.TP
.B -y | -n
Reload or do not reload with being asked. Default is to ask.

.PP
Depending on the hcron configuration, event definition files should be
stored under 1) each user's home directory, or 2) a special location as
<events_base_path>/<username>, below which is the following:

.RS
.nf
\.hcron/
  <hostName>/
    events/
      <dirs and files>
  ...
.fi
.RE

.PP
From the tree above, the hcron-scheduler loads event definitions which
correspond to the host on which it is running. Event definitions are read
from the events/ tree.

.SH EVENT DEFINTION FILE
.PP
Each event definition is contained in a single, plain text file. Each
line consists of a name=value setting. Empty lines and those starting
with # are ignored. Lines ending with a \ are concatenated with the following
line (line continuation).

.PP
The following directives are recognized:

.TP
.B include <name>
the include file stored under the "includes" directory. <name> is any
valid event name.

.PP
The following fields are recognized:

.TP
.B as_user
the user name to use when contacting the host when the command is
to be carried out as a different user; an empty setting means the
current user

.TP
.B host
the host on which the command is to execute

.TP
.B command
the command to execute. See below for command environment setup.

.TP
.B notify_email
a comma separated list of email addresses to which an email
notification is sent whenever the event command is executed

.TP
.B notify_message
the message to include in the email notification

.TP
.B when_year
Optional: schedule specified as a comma-separated list of years (between
2000-2050). Default is when_year=* if not specified

.TP
.B when_month
schedule specified as a comma-separated list of months (the
first month is 1)

.TP
.B when_day
as when_month, but for the day of the month (range depends
on the month)

.TP
.B when_hour
as when_month, but for the hour of the day (0-23)

.TP
.B when_minute
as when_month, but for the minute of the hour (0-59)

.TP
.B when_dow
as when_month, but for the day of the week (0-6 with Sunday
as 0)

.TP
.B template_name
Optional: if the value matches the last component of the event
name, the event is ignored.

.TP
.B next_event
Optional: name of the next event to "chain" execute if the command
is successfully spawned on the target host

.TP
.B failover_event
Optional: name of the next event to "chain" execute if the command
fails to be spawned on the target host

.PP
The when_* fields allow for a wilcard (*) and command-separated lists.

.SS Event Chaining

.PP
A chain of events can be set up by setting the next_event and/or
failover_event settings. The $HCRON_EVENT_CHAIN variable (see below)
can be used to provide information about the point in the chain at
which the event is executing. The maximum number of chained events
can be configured.

The next_event and failover_event names are relative to the executing
event or relative to "~/.hcron/<fqHostName>/events" if the name begins
with "/". "." and ".." components are valid.

.SS Hcron Variable Substitution

.PP
Hcron provides some variables (not environment variables) which may be
substituted in the settings. Depending on the variable, this happens
when the event file is loaded (early substitution), or just before it
is executed (late substitution). The variables are:

.TP
.B "$HCRON_ACTIVATE_DATETIME, $HCRON_ACTIVATE_DATETIME_UTC"
The time (local and UTC respectively) at which the event is activated/
executed. The format is: YYYY:MM:DD:HH:MM:SS:WOY:DOW . [Late substitution.]

.TP
.B $HCRON_HOST_NAME
The host name of the host executing hcron. [Early substitution.]

.TP
.B "$HCRON_EVENT_CHAIN"
When an event is executed, it begins an event chain. If subsequent
events are executed via the `next_event` or `failover_event` settings,
they are added. $HCRON_EVENT_CHAIN contains :-separated list of event
names which make up the event chain. [Late substitution.]

.TP
.B "$HCRON_EVENT_NAME"
The full event name which consists of the path following the
".../events" is in $HCRON_EVENT_NAME as an absolute path (starts
with /). HCRON_EVENT_NAME is unique in that the default split separator
is /, not : . [Early substitution.]

.TP
.B "$HCRON_SCHEDULE_DATETIME, $HCRON_SCHEDULE_DATETIME_UTC"
The time (local and UTC respectively) for which the event was scheduled.
The format is: YYYY:MM:DD:HH:MM:SS:WOY:DOW . [Late substitution.]

.TP
.B $HCRON_SELF_CHAIN
:-separated list of consecutive chained events to self (the same event) by
next_event or failover_event. [Late substitution.]

.PP
The default split and join separators, used with indexing, is : .

.PP
Indexing follows may use the following formats (as in Python): [<index>],
[<start>:<stop>], [<start>:<stop>:<step>]. Negative indexing is supported.

.SS Includes

.PP
Using the "include" directive, event files may include the contents (in
place) of files stored elsewhere under the "events/" directory. This makes it
easy to collect common settings in one place and "include" them rather
than enter them in individual event files.

.SS Template Event Definitions

.PP
Template event definitions are useful when an event definition can be
sufficiently specified using variable substitutions. Typical use cases
are when only the host field of the event definition changes and this
information is available from one of the components of the $HCRON_EVENT_NAME.
The required symbolic (or hard) links are then made to the template.

.SS Command Environment Setup

.PP
When executing the command, the user environment is NOT set up
automatically. It is left to the user to set up the environment
in which the command is to run. This is advantageous because:

.IP \[bu] 2
it does not force a performance penalty for potentially unnecessary
initialization

.IP \[bu] 2
the user may initialize the environment in a particular way, which
may not necessarily be as in a full interactive session.

.PP
Environment initialization is shell-specific. The following may be
used for the sh-type (e.g., sh, bash, ksh) shells:

.IP ". /etc/profile"
the system environment configuration

.IP ". ~/.profile"
the user environment configuration

.PP
The csh-type (e.g., csh, tcsh) shells use various environment
configuration files. The following may be used:

.IP "source /etc/cshrc"
the system environment configuration

.IP "source /etc/.login"
another system environment configuration, usually done after /etc/cshrc

.IP "source ~/.cshrc"
the user environment configuration (read when a csh shell starts)

.IP "source ~/.login"
the user environment configuration (read after ~/.cshrc, at login time
only)

.PP
See the example below which performs environment configuration.

.SH EXAMPLES
.PP
An event definition to append "hello world" to the end of a file, at
every 10 minutes, and send an email notification would look like:

.RS
.nf
as_user=
host=mymachine.xyz
command=echo "hello world" >> /tmp/hello
notify_email=myself@xyz
notify_msg=Message sent!
when_month=*
when_day=*
when_hour=*
when_minute=0,10,20,30,40,50
when_dow=*
.fi
.RE

.PP
An event definition to write the current environment settings to a file
in the user's home, at 12 midnight, every day. Note: the user uses a
sh-type shell; both the system and user profiles are read:

.RS
.nf
as_user=
host=mymachine.xyz
command=. /etc/profile; . ~/.profile; rm -f ~/my_env; env > ~/my_env
notify_email=myself@xyz
notify_msg=~/my_env has been updated
when_month=*
when_day=*
when_hour=0
when_minute=0
when_dow=*
.fi
.RE

.SS Using Variable Substitution

.PP
An event definition to write run a cleanup command every 1am on a number of hosts:

.RS
.nf
as_user=
host=$HCRON_EVENT_NAME[-1]
command=cleanup
notify_email=
notify_msg=
when_month=*
when_day=*
when_hour=1
when_minute=0
when_dow=*
.fi
.RE

with an event file tree of as below, with all files exactly as above:

.RS
.nf
.../
  events/
    cleanup/
      machine_room/
        mach1.xyz.com
        mach2.xyz.com
        mach3.xyz.com
        mach4.xyz.com
.fi
.RW

.SS Using the include Directive.

.RS
.nf
include /vars~
as_user=
host=mymachine.xyz
...
.fi

.SH ENVIRONMENT VARIABLES
.TP
EDITOR
Specifies the editor to use.

.SH SEE ALSO
hcron(7), hcron-info(1), hcron-reload(1), hcron-scheduler(8)

.SH AUTHOR
Written by John Marshall.

.SH "REPORTING BUGS"
Report bugs to: <http://code.google.com/p/hcron/>.

.SH COPYRIGHT
Copyright \(co 2008-2010 Environment Canada.
.br
This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.
